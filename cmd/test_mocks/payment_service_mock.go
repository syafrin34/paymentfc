// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/payment/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "paymentfc/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentService is a mock of PaymentService interface.
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService.
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance.
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// CheckPaymentAmountByOrderID mocks base method.
func (m *MockPaymentService) CheckPaymentAmountByOrderID(ctx context.Context, orderID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPaymentAmountByOrderID", ctx, orderID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPaymentAmountByOrderID indicates an expected call of CheckPaymentAmountByOrderID.
func (mr *MockPaymentServiceMockRecorder) CheckPaymentAmountByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPaymentAmountByOrderID", reflect.TypeOf((*MockPaymentService)(nil).CheckPaymentAmountByOrderID), ctx, orderID)
}

// GetFailedPaymentList mocks base method.
func (m *MockPaymentService) GetFailedPaymentList(ctx context.Context) ([]models.PaymentRequests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailedPaymentList", ctx)
	ret0, _ := ret[0].([]models.PaymentRequests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailedPaymentList indicates an expected call of GetFailedPaymentList.
func (mr *MockPaymentServiceMockRecorder) GetFailedPaymentList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailedPaymentList", reflect.TypeOf((*MockPaymentService)(nil).GetFailedPaymentList), ctx)
}

// GetPaymentInfoByOrderID mocks base method.
func (m *MockPaymentService) GetPaymentInfoByOrderID(ctx context.Context, orderID int64) (models.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentInfoByOrderID", ctx, orderID)
	ret0, _ := ret[0].(models.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentInfoByOrderID indicates an expected call of GetPaymentInfoByOrderID.
func (mr *MockPaymentServiceMockRecorder) GetPaymentInfoByOrderID(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentInfoByOrderID", reflect.TypeOf((*MockPaymentService)(nil).GetPaymentInfoByOrderID), ctx, orderID)
}

// ProcessPaymentFailed mocks base method.
func (m *MockPaymentService) ProcessPaymentFailed(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPaymentFailed", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPaymentFailed indicates an expected call of ProcessPaymentFailed.
func (mr *MockPaymentServiceMockRecorder) ProcessPaymentFailed(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPaymentFailed", reflect.TypeOf((*MockPaymentService)(nil).ProcessPaymentFailed), ctx, orderID)
}

// ProcessPaymentSuccess mocks base method.
func (m *MockPaymentService) ProcessPaymentSuccess(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPaymentSuccess", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPaymentSuccess indicates an expected call of ProcessPaymentSuccess.
func (mr *MockPaymentServiceMockRecorder) ProcessPaymentSuccess(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPaymentSuccess", reflect.TypeOf((*MockPaymentService)(nil).ProcessPaymentSuccess), ctx, orderID)
}

// SavePaymentAnomaly mocks base method.
func (m *MockPaymentService) SavePaymentAnomaly(ctx context.Context, param models.PaymentAnomaly) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePaymentAnomaly", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePaymentAnomaly indicates an expected call of SavePaymentAnomaly.
func (mr *MockPaymentServiceMockRecorder) SavePaymentAnomaly(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePaymentAnomaly", reflect.TypeOf((*MockPaymentService)(nil).SavePaymentAnomaly), ctx, param)
}

// SavePaymentRequests mocks base method.
func (m *MockPaymentService) SavePaymentRequests(ctx context.Context, param models.PaymentRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePaymentRequests", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePaymentRequests indicates an expected call of SavePaymentRequests.
func (mr *MockPaymentServiceMockRecorder) SavePaymentRequests(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePaymentRequests", reflect.TypeOf((*MockPaymentService)(nil).SavePaymentRequests), ctx, param)
}
